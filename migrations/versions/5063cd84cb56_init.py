"""init

Revision ID: 5063cd84cb56
Revises: 
Create Date: 2021-06-24 06:25:53.412753

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5063cd84cb56'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('conditions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conditions_name'), 'conditions', ['name'], unique=True)
    op.create_table('studies',
    sa.Column('id', sa.String(length=11), nullable=False),
    sa.Column('upload_date', sa.Date(), nullable=True),
    sa.Column('short_title', sa.String(length=300), nullable=True),
    sa.Column('official_title', sa.String(length=600), nullable=True),
    sa.Column('description', sa.String(length=5000), nullable=True),
    sa.Column('responsible_party', sa.String(length=160), nullable=True),
    sa.Column('sponsor', sa.String(length=160), nullable=True),
    sa.Column('type', sa.Enum('INTERVENTIONAL', 'OBSERVATIONAL', 'PATIENT_REGISTRY', 'EXPANDED_ACCESS', name='study_type'), nullable=True),
    sa.Column('purpose', sa.Enum('TREATMENT', 'PREVENTION', 'BASIC_SCIENCE', 'OTHER', 'SUPPORTIVE_CARE', 'DIAGNOSTIC', 'HEALTH_SERVICES_RESEARCH', 'SCREENING', 'DEVICE_FEASIBILITY', 'NA', name='purpose'), nullable=True),
    sa.Column('intervention_type', sa.Enum('PARALLEL_ASSIGNMENT', 'SINGLE_GROUP_ASSIGNMENT', 'CROSSOVER_ASSIGNMENT', 'FACTORIAL_ASSIGNMENT', 'SEQUENTIAL_ASSIGNMENT', 'NA', name='intervention_type'), nullable=True),
    sa.Column('min_age', sa.Integer(), nullable=True),
    sa.Column('min_age_units', sa.Enum('YEARS', 'MONTHS', 'WEEKS', 'DAYS', 'HOURS', 'MINUTES', 'NA', name='age_units'), nullable=True),
    sa.Column('max_age', sa.Integer(), nullable=True),
    sa.Column('max_age_units', sa.Enum('YEARS', 'MONTHS', 'WEEKS', 'DAYS', 'HOURS', 'MINUTES', 'NA', name='age_units'), nullable=True),
    sa.Column('gender', sa.Enum('ALL', 'FEMALE', 'MALE', 'NA', name='gender'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('criteria',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('criteria', sa.String(length=500), nullable=True),
    sa.Column('is_inclusion', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('study_id', sa.String(length=7), nullable=True),
    sa.Column('description', sa.String(length=1500), nullable=True),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('measures',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('title', sa.String(length=256), nullable=True),
    sa.Column('description', sa.String(length=1005), nullable=True),
    sa.Column('dispersion', sa.Enum('STANDARD_DEVIATION', 'CONFIDENCE_INTERVAL_95', 'STANDARD_ERROR', 'FULL_RANGE', 'GEOMETRIC_COEFFICIENT_OF_VARIATION', 'INTER_QUARTILE_RANGE', 'CONFIDENCE_INTERVAL_90', 'CONFIDENCE_INTERVAL_80', 'CONFIDENCE_INTERVAL_97', 'CONFIDENCE_INTERVAL_99', 'CONFIDENCE_INTERVAL_60', 'CONFIDENCE_INTERVAL_96', 'CONFIDENCE_INTERVAL_98', 'CONFIDENCE_INTERVAL_70', 'CONFIDENCE_INTERVAL_85', 'CONFIDENCE_INTERVAL_75', 'CONFIDENCE_INTERVAL_94', 'CONFIDENCE_INTERVAL_100', 'NA', name='dispersion_param'), nullable=True),
    sa.Column('type', sa.Enum('PRIMARY', 'SECONDARY', 'OTHER', name='measure_type'), nullable=True),
    sa.Column('param', sa.Enum('MEAN', 'NUMBER', 'MEDIAN', 'COUNT_OF_PARTICIPANTS', 'LEAST_SQUARES_MEAN', 'GEOMETRIC_MEAN', 'COUNT_OF_UNITS', 'GEOMETRIC_LEAST_SQUARES_MEAN', 'LOG_MEAN', 'NA', name='measure_param'), nullable=True),
    sa.Column('units', sa.String(length=40), nullable=True),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('study_conditions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('condition', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['condition'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('treatments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('company', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=162), nullable=True),
    sa.Column('from_study', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['company'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('administrations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group', sa.Integer(), nullable=True),
    sa.Column('treatment', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=1500), nullable=True),
    sa.ForeignKeyConstraint(['group'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['treatment'], ['treatments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('analytics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('measure', sa.Integer(), nullable=True),
    sa.Column('from_study', sa.Boolean(), nullable=True),
    sa.Column('method', sa.String(length=100), nullable=True),
    sa.Column('p_value', sa.Float(), nullable=True),
    sa.Column('param_type', sa.String(length=100), nullable=True),
    sa.Column('is_non_inferiority', sa.Boolean(), nullable=True),
    sa.Column('non_inferiority_type', sa.Enum('SUPERIORITY_OR_OTHER', 'SUPERIORITY', 'OTHER', 'SUPERIORITY_OR_OTHER_LEGACY', 'NON_INFERIORITY_OR_EQUIVALENCE', 'NON_INFERIORITY', 'NON_INFERIORITY_OR_EQUIVALENCE_LEGACY', 'EQUIVALENCE', 'NA', name='non_inferiority_type'), nullable=True),
    sa.Column('non_inferiority_comment', sa.String(length=500), nullable=True),
    sa.Column('param_value', sa.Float(), nullable=True),
    sa.Column('ci_pct', sa.Integer(), nullable=True),
    sa.Column('ci_lower', sa.Float(), nullable=True),
    sa.Column('ci_upper', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['measure'], ['measures.id'], ),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('baselines',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base', sa.String(length=100), nullable=True),
    sa.Column('clss', sa.String(length=100), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('param_type', sa.Enum('MEAN', 'NUMBER', 'COUNT_OF_PARTICIPANTS', 'LEAST_SQUARES_MEAN', 'GEOMETRIC_MEAN', 'COUNT_OF_UNITS', 'GEOMETRIC_LEAST_SQUARES_MEAN', 'LOG_MEAN', 'NA', name='measure_param'), nullable=True),
    sa.Column('dispersion', sa.Enum('STANDARD_DEVIATION', 'CONFIDENCE_INTERVAL_95', 'STANDARD_ERROR', 'FULL_RANGE', 'GEOMETRIC_COEFFICIENT_OF_VARIATION', 'INTER_QUARTILE_RANGE', 'CONFIDENCE_INTERVAL_90', 'CONFIDENCE_INTERVAL_80', 'CONFIDENCE_INTERVAL_97', 'CONFIDENCE_INTERVAL_99', 'CONFIDENCE_INTERVAL_60', 'CONFIDENCE_INTERVAL_96', 'CONFIDENCE_INTERVAL_98', 'CONFIDENCE_INTERVAL_70', 'CONFIDENCE_INTERVAL_85', 'CONFIDENCE_INTERVAL_75', 'CONFIDENCE_INTERVAL_94', 'CONFIDENCE_INTERVAL_100', 'NA', name='dispersion_param'), nullable=True),
    sa.Column('unit', sa.String(length=40), nullable=True),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('spread', sa.Float(), nullable=True),
    sa.Column('upper', sa.Float(), nullable=True),
    sa.Column('lower', sa.Float(), nullable=True),
    sa.Column('type', sa.Enum('RACE', 'GENDER', 'ETHNICITY', 'AGE', 'OTHER', name='baseline_type'), nullable=True),
    sa.Column('sub_type', sa.Enum('WHITE', 'BLACK', 'ASIAN', 'INDIAN', 'PACIFIC', 'MALE', 'FEMALE', 'NA', name='baseline_subtype'), nullable=True),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('effects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('group', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('organ_system', sa.Enum('BLOOD_AND_LYMPHATIC_SYSTEM_DISORDERS', 'CARDIAC_DISORDERS', 'CONGENITAL_FAMILIAL_AND_GENETIC_DISORDERS', 'EAR_AND_LABYRINTH_DISORDERS', 'ENDOCRINE_DISORDERS', 'EYE_DISORDERS', 'GASTROINTESTINAL_DISORDERS', 'GENERAL_DISORDERS', 'HEPATOBILIARY_DISORDERS', 'IMMUNE_SYSTEM_DISORDERS', 'INFECTIONS_AND_INFESTATIONS', 'INJURY_POISONING_AND_PROCEDURAL_COMPLICATIONS', 'INVESTIGATIONS', 'METABOLISM_AND_NUTRITION_DISORDERS', 'MUSCULOSKELETAL_AND_CONNECTIVE_TISSUE_DISORDERS', 'NEOPLASMS_BENIGN_MALIGNANT_AND_UNSPECIFIED', 'NERVOUS_SYSTEM_DISORDERS', 'PREGNANCY_PUERPERIUM_AND_PERINATAL_CONDITIONS', 'PRODUCT_ISSUES', 'PSYCHIATRIC_DISORDERS', 'RENAL_AND_URINARY_DISORDERS', 'REPRODUCTIVE_SYSTEM_AND_BREAST_DISORDERS', 'RESPIRATORY_THORACIC_AND_MEDIASTINAL_DISORDERS', 'SKIN_AND_SUBCUTANEOUS_TISSUE_DISORDERS', 'SOCIAL_CIRCUMSTANCES', 'SURGICAL_AND_MEDICAL_PROCEDURES', 'VASCUALR_DISORDERS', name='organ_system'), nullable=True),
    sa.Column('assessment', sa.Enum('SYSTEMATIC_ASSESSMENT', 'NON_SYSTEMATIC_ASSESSMENT', name='effect_collection_method'), nullable=True),
    sa.Column('no_effected', sa.Float(), nullable=True),
    sa.Column('collection_threshold', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['group'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('comparison',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analytic', sa.Integer(), nullable=True),
    sa.Column('administration', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['administration'], ['administrations.id'], ),
    sa.ForeignKeyConstraint(['analytic'], ['analytics.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('outcomes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('administration', sa.Integer(), nullable=True),
    sa.Column('measure', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=225), nullable=True),
    sa.Column('value', sa.Float(), nullable=True),
    sa.Column('dispersion', sa.Float(), nullable=True),
    sa.Column('upper', sa.Float(), nullable=True),
    sa.Column('lower', sa.Float(), nullable=True),
    sa.Column('no_participants', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['administration'], ['administrations.id'], ),
    sa.ForeignKeyConstraint(['measure'], ['measures.id'], ),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('outcomes')
    op.drop_table('comparison')
    op.drop_table('effects')
    op.drop_table('baselines')
    op.drop_table('analytics')
    op.drop_table('administrations')
    op.drop_table('treatments')
    op.drop_table('study_conditions')
    op.drop_table('measures')
    op.drop_table('groups')
    op.drop_table('criteria')
    op.drop_table('studies')
    op.drop_index(op.f('ix_conditions_name'), table_name='conditions')
    op.drop_table('conditions')
    op.drop_table('companies')
    # ### end Alembic commands ###
