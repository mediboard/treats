"""init

Revision ID: 05a18c8956c1
Revises: 
Create Date: 2021-05-26 18:21:33.650230

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '05a18c8956c1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('conditions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conditions_name'), 'conditions', ['name'], unique=True)
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('description', sa.String(length=999), nullable=True),
    sa.Column('type', sa.Enum('EXPERIMENTAL', 'ACTIVE_COMPARATOR', 'PLACEBO_COMPARATOR', 'SHAM_COMPARATOR', 'NO_INTERVENTION', 'OTHER', name='group_type'), nullable=True),
    sa.Column('participants', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('studies',
    sa.Column('id', sa.String(length=11), nullable=False),
    sa.Column('upload_date', sa.Date(), nullable=True),
    sa.Column('name', sa.String(length=300), nullable=True),
    sa.Column('description', sa.String(length=5000), nullable=True),
    sa.Column('responsible_party', sa.String(length=100), nullable=True),
    sa.Column('type', sa.Enum('INTERVENTIONAL', 'OBSERVATIONAL', 'PATIENT_REGISTRY', 'EXPANDED_ACCESS', name='study_type'), nullable=True),
    sa.Column('purpose', sa.Enum('TREATMENT', 'PREVENTION', 'BASIC_SCIENCE', 'OTHER', 'SUPPORTIVE_CARE', 'DIAGNOSTIC', 'HEALTH_SERVICES_RESEARCH', 'SCREENING', 'DEVICE_FEASIBILITY', 'NA', name='purpose'), nullable=True),
    sa.Column('intervention_type', sa.Enum('PARALLEL_ASSIGNMENT', 'SINGLE_GROUP_ASSIGNMENT', 'CROSSOVER_ASSIGNMENT', 'FACTORIAL_ASSIGNMENT', 'SEQUENTIAL_ASSIGNMENT', 'NA', name='intervention_type'), nullable=True),
    sa.Column('min_age', sa.Integer(), nullable=True),
    sa.Column('max_age', sa.Integer(), nullable=True),
    sa.Column('gender', sa.Enum('ALL', 'FEMALE', 'MALE', 'NA', name='gender'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('criteria',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('criteria', sa.String(length=500), nullable=True),
    sa.Column('is_inclusion', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('measures',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('title', sa.String(length=254), nullable=True),
    sa.Column('description', sa.String(length=999), nullable=True),
    sa.Column('type', sa.Enum('PRIMARY', 'SECONDARY', 'OTHER', name='measure_type'), nullable=True),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('study_conditions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('condition', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['condition'], ['conditions.id'], ),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('treatments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('company', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['company'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('administrations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group', sa.Integer(), nullable=True),
    sa.Column('treatment', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.ForeignKeyConstraint(['group'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['treatment'], ['treatments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('analytics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('study', sa.String(length=11), nullable=True),
    sa.Column('measure', sa.Integer(), nullable=True),
    sa.Column('from_study', sa.Boolean(), nullable=True),
    sa.Column('method', sa.String(length=100), nullable=True),
    sa.Column('p_value', sa.Float(), nullable=True),
    sa.Column('param_type', sa.String(length=100), nullable=True),
    sa.Column('is_non_inferiority', sa.Boolean(), nullable=True),
    sa.Column('non_inferiority_type', sa.Enum('SUPERIORITY_OR_OTHER', 'SUPERIORITY', 'OTHER', 'SUPERIORITY_OR_OTHER_LEGACY', 'NON_INFERIORITY_OR_EQUIVALENCE', 'NON_INFERIORITY', 'NON_INFERIORITY_OR_EQUIVALENCE_LEGACY', name='non_inferiority_type'), nullable=True),
    sa.Column('non_inferiority_comment', sa.String(length=500), nullable=True),
    sa.Column('param_value', sa.Float(), nullable=True),
    sa.Column('ci_pct', sa.Integer(), nullable=True),
    sa.Column('ci_lower', sa.Float(), nullable=True),
    sa.Column('ci_upper', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['measure'], ['measures.id'], ),
    sa.ForeignKeyConstraint(['study'], ['studies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('comparison',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analytic', sa.Integer(), nullable=True),
    sa.Column('group', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['analytic'], ['analytics.id'], ),
    sa.ForeignKeyConstraint(['group'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comparison')
    op.drop_table('analytics')
    op.drop_table('administrations')
    op.drop_table('treatments')
    op.drop_table('study_conditions')
    op.drop_table('measures')
    op.drop_table('criteria')
    op.drop_table('studies')
    op.drop_table('groups')
    op.drop_index(op.f('ix_conditions_name'), table_name='conditions')
    op.drop_table('conditions')
    op.drop_table('companies')
    # ### end Alembic commands ###
